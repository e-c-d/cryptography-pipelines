# inspired from https://github.com/e-c-d/FreeRDP/tree/azure-pipelines

parameters:
- name: build_type
  type: string
  default: "Release"
- name: arch
  type: string
  default: "64"
- name: openssl_version_name
  type: string
  default: "1_1"
- name: openssl_version
  type: string
  default: ">=1.1,<1.2"
- name: python_version_name
  type: string
  default: "3_6"
- name: python_version
  type: string
  default: "3.6"

jobs:
- job:
  variables:
    buildname: "cryptography-conda-ssl${{ parameters.openssl_version_name }}-\
      win${{ parameters.arch }}-py${{ parameters.python_version_name }}-${{ parameters.build_type }}"
  displayName: "Build python-cryptography \
    with OpenSSL ${{ parameters.openssl_version_name }} \
    for Python ${{ parameters.python_version_name }}, \
    for architecture ${{ parameters.arch }}, \
    build type ${{ parameters.build_type }}"
  pool:
    vmImage: 'vs2017-win2016'

  steps:
  - powershell: |
      Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
      Write-Host "##vso[task.setvariable variable=CONDAPS1]$env:CONDA\shell\condabin\conda-hook.ps1"
    displayName: Add conda to PATH

  - ${{ if eq(parameters.arch, '32') }}:
      - powershell: |
          Write-Host "##vso[task.setvariable variable=CONDA_FORCE_32BIT]1"

  - script: |
      conda create --yes --quiet --name chihiro python=${{ parameters.python_version }}
    displayName: Create Anaconda environment

  - script: |
      call activate chihiro
      conda install --yes --quiet --name chihiro openssl"${{ parameters.openssl_version }}" zlib pytest nasm
    displayName: Install Anaconda packages

  # - script: |
  #     call activate chihiro
  #     cmake -LA || cd .
  #   displayName: List compile options

  - powershell: |
      $sha256 = "DDB04774F1E32F0C49751E21B67216AC87852CEB056B75209AF2443400636D46"
      $url = "https://www.openssl.org/source/openssl-1.1.1g.tar.gz"
      Invoke-WebRequest -OutFile "openssl.tar.gz.tmp" -Uri "$url"

      if ((Get-FileHash "openssl.tar.gz.tmp" -Algorithm SHA256).Hash -eq $sha256) {
         Rename-Item "openssl.tar.gz.tmp" "openssl.tar.gz"
      } else {
         "Hash check failed" | Write-Debug
         Exit 1
      }

      if ("${{ parameters.arch }}" -eq "32") {
        Write-Host "##vso[task.setvariable variable=openssl_target]VC-WIN32"
      }
      if ("${{ parameters.arch }}" -eq "64") {
        Write-Host "##vso[task.setvariable variable=openssl_target]VC-WIN64A"
      }
    displayName: Download OpenSSL

  - task: ExtractFiles@1
    inputs:
      archiveFilePatterns: 'openssl.tar.gz'
      destinationFolder: 'tmp-ssl'
      cleanDestinationFolder: true

  - powershell: |
      Move-Item -Path tmp-ssl\openssl* -Destination openssl
    displayName: Rename extracted OpenSSL

  - script: |
      dir /a-D /S /B .
    displayName: List files

  # Note: the conda environment is needed for nasm
  - script: |
      call activate chihiro
      cd openssl

      call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvars${{ parameters.arch }}.bat"

      perl Configure no-comp no-shared no-tests %openssl_target%
      nmake
    displayName: Build OpenSSL

  - script: |
      call activate chihiro
      call "C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvars${{ parameters.arch }}.bat"
      set CC=cl.exe
      set CXX=cl.exe
      set LIB=openssl;%LIB%
      set INCLUDE=openssl\include;%INCLUDE%
      python setup.py bdist_wheel
    displayName: Build package

  - script: |
      dir /a-D /S /B dist
    displayName: List built files

  - task: CopyFiles@2
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)/dist'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
      flattenFolders: true
    displayName: Copy files to artifact staging directory

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: "$(buildname)"
    displayName: Publish build artifacts

  # - powershell: |
  #     . $Env:CONDAPS1
  #     conda activate chihiro
  #     New-Item -Name build -ItemType directory
  #     cmake -G "NMake Makefiles" -B build -DCMAKE_BUILD_TYPE=Release
  #     cmake --build build
